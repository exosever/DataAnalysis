#! /usr/bin/env python3

from pandas import DataFrame, ExcelWriter
from ldap3 import Server, Connection, ALL, SUBTREE
import re
import sys
import os
import tkinter as tk
from dotenv import load_dotenv
from tkinter import filedialog
from csv import DictReader
# ----------------------------------------------------#
# Data comparison tool by Joshua Harrison             |
# For AD, 1to1 Asset Management, and Microsoft Intune |
# ----------------------------------------------------#
#############################
# Function to establish proper location/container for AD
#############################


def school_select():
    """
    This function takes a user selected input, and returns two values for School Identifier, and Grade Level
    These values are later used for our AD search function to pull the appropriate container data
    """
    ad_identifier = tk.StringVar(root, "")
    ad_grade = tk.StringVar(root, "")
    menu = tk.Menu(root)
    root.config(menu=menu)

    elementary = tk.Menu(menu)
    middle = tk.Menu(menu)
    high = tk.Menu(menu)
    other = tk.Menu(menu)

    # Elementary Schools
    """
    The following code snippet has been shortened and sanitized
    """
    elementary.add_command(label="ELEMENTARY", command=lambda: (
        ad_identifier.set("ELEM"), ad_grade.set("Elementary Schools"), root.quit()))
    

    # Middle Schools
    middle.add_command(label="MIDDLE", command=lambda: (
        ad_identifier.set("MIDDLE"), ad_grade.set("Middle Schools"), root.quit()))


    # High Schools
    high.add_command(label="HIGH", command=lambda: (
        ad_identifier.set("HIGH"), ad_grade.set("High Schools"), root.quit()))


    # Other Schools
    other.add_command(label="OTHER", command=lambda: (
        ad_identifier.set("OTHER"), ad_grade.set("Other Schools"), root.quit()))


    # Drop-Down Menus
    menu.add_cascade(label="Elementary Schools", menu=elementary)
    menu.add_cascade(label="Middle Schools", menu=middle)
    menu.add_cascade(label="High Schools", menu=high)
    menu.add_cascade(label="Other Schools", menu=other)

    # Configuration of Menu Window
    root.geometry("220x40+900+400")
    # root.overrideredirect(True)
    title_bar = tk.Label(
        root, text="Please Choose Your School", bg="darkgreen", fg="white")
    title_bar.pack(side="top", fill="x")
    root.mainloop()
    return ad_identifier.get(), ad_grade.get()


root = tk.Tk()
school = school_select()

#############################
# AD Connector and search parameters
#############################
"""
This code block handles the connection to AD via LDAP.
It searches for Student and Staff containers using the ad_identifier and ad_grade values provided in school_select()
Adds all found entries as a list of dictionaries
"""

load_dotenv()
ldap_address = os.environ.get('ldap_Address')
ldap_username = os.environ.get('ldap_username')
ldap_password = os.environ.get('ldap_password')

if school:
    server = Server(ldap_address, get_info=ALL)
    conn = Connection(server, user=ldap_username,
                      password=ldap_password, auto_bind=True)

    search_base = 'OU=Student,OU=Workstations,OU='f"{
        school[0]}"',OU='f"{school[1]}"',OU=schools,DC=,DC=local'
    search_filter = '(objectClass=Computer)'
    attributes = ('name', 'description', 'lastLogon')

    conn.search(search_base, search_filter,
                search_scope=SUBTREE, attributes=attributes)

    AD_raw_data = []
    for entry in conn.entries:
        AD_raw_data.append((entry.entry_attributes_as_dict))

    search_base = 'OU=Staff,OU=Workstations,OU='f"{
        school[0]}"',OU='f"{school[1]}"',OU=schools,DC=,DC=local'
    search_filter = '(objectClass=*)'
    attributes = ('name', 'description', 'lastLogon')

    conn.search(search_base, search_filter,
                search_scope=SUBTREE, attributes=attributes)

    for entry in conn.entries:
        AD_raw_data.append((entry.entry_attributes_as_dict))

    conn.unbind()

else:
    sys.exit()


#############################
# Function to open file select window for 1to1
#############################


def OneToOne_file_select():
    """
    This function opens a file dialog window for the user to select their 1to1 data location
    """
    root.withdraw()
    file_path = filedialog.askopenfilename(
        title="Please Select Your Exported 1to1 Asset File!")
    return file_path


def OneToOne_error():
    """
    This function provides the user with an informative error if the data provided does not match requirements
    """
    popup = tk.Toplevel()
    popup.title("Error: Invalid file selected")
    popup.geometry("550x100+800+500")
    popup_label = tk.Label(popup, text="Please be sure to select the exported 1 To 1 Asset file!\n"
                           "The exported file should contain 'Asset ID', 'Serial Number', 'Asset Type', and 'Computer Name'.")
    popup_label.pack(pady=10)
    popup_button = tk.Button(popup, text="Try Again", command=popup.destroy)
    popup_button.pack()
    popup.lift()
    return popup


############################
# Filter 1to1 Data
############################
OneToOne_selection = True
while OneToOne_selection:
    """
    This code block uses a while loop to ensure the 1to1 file selected is correct
    If no file is selected, or if the user quits or cancels, it will break the loop
    The function then checks for the correct .csv format, and required headers
    If file is incorrect, it will open the OneToOne_error popup
    If file is correct, it will break the loop and save specified data as a list of dictionaries
    """
    file_path = OneToOne_file_select()
    OneToOne_raw_data = []
    if file_path:
        if file_path.endswith(".csv"):
            try:
                with open(file_path, 'r', encoding="utf-8-sig") as file:
                    csv_reader = DictReader(file)
                    desired_headers = ['Asset ID',
                                       'Computer Name', 'Serial Number']
                    if not all(header in csv_reader.fieldnames for header in desired_headers):
                        popup = OneToOne_error()
                        popup.wait_window(popup)
                        continue
                    OneToOne_selection = False
                    for row in csv_reader:
                        if row.get('Asset Type Short Name') in ['Desktop', '2in1 Laptop', 'Loaner Device']:
                            selected_data = {}
                            for header in desired_headers:
                                selected_data[header] = row.get(header)
                            name = selected_data['Computer Name']
                            if not name.startswith('D'):
                                OneToOne_raw_data.append(selected_data)
            except:
                popup = OneToOne_error()
                popup.wait_window(popup)
        else:
            popup = OneToOne_error()
            popup.wait_window(popup)
    else:
        sys.exit()

#############################
# Filter AD data to grab Serial Number and lastLogon time
#############################
"""
This code block iterates over the AD_raw_data to extrapolate necessary information
Code checks for logon field, and then continue on to pull SN: from each entries description
If no logon field or SN: present, it adds 'No Previous Login' or 'Missing Serial'
Entries are then added to a list of formatted dictionaries
"""
AD_clean_data = []
for data in AD_raw_data:
    description = data['description']
    name = data['name']
    logon = data['lastLogon']
    name = name[0]

    if logon:
        datetime_object = logon[0]
        lastlogon = datetime_object.strftime("%Y-%m-%d %H:%M:%S")
    else:
        lastlogon = "No Previous Login"

    if description:
        description_str = description[0]
        match = re.search(r"SN:([a-zA-Z0-9]+),", description_str)
        if match:
            serial_number = match.group(1)
            AD_clean_data.append(
                {'AD Serial Number': serial_number, 'AD Computer Name': name, 'Last Login': lastlogon})
    else:
        AD_clean_data.append({'AD Serial Number': 'Missing Serial',
                             'AD Computer Name': name, 'Last Login': lastlogon})

#############################
# Compare the two data sets (OneToOne_raw_data) and (AD_clean_data)
#############################


def find_serials(list, serial_search):
    """
    This function searches the provided list, against the Key parameter provided
    It then returns a list of all serials present
    """
    serial_list = []
    for line in list:
        if serial_list.count(line[serial_search]) != 1:
            serial_list.append(line[serial_search])
    return serial_list


def find_exceptions(serials, comparison):
    """
    This function takes a list of serials, and compares it to the AD serial list.
    This is to find entries that do not have a match in AD
    """
    exceptions = []
    for line in comparison:
        if line['AD Serial Number'] != 'Missing Serial' and serials.count(line['AD Serial Number']) != 1:
            exceptions.append(line)
    return exceptions


def find_matches(list, serial_search, comparison):
    """
    This function passes a list, with a given Key parameter, and finds all matching entries
    between AD and the provided list and returns them in a list.
    """
    matches = []
    for line in comparison:
        for line2 in list:
            if line2[serial_search] == line['AD Serial Number']:
                matched_line = []
                matched_line.append(line2)
                matched_line.append(line)
                matches.append(matched_line)
                break
    return matches


"""
This code block creates multiple data sets from AD_raw_Data
One of all serial numbers found, one of all duplicate serial numbers found,
One of all entries with 'Missing Serial' in the 'AD Serial Number Field', and one with all computer names found
"""
AD_master_list = []
AD_duplicate_serials = []
AD_missing_serials = []
AD_names = []
for line in AD_clean_data:
    if line['AD Serial Number'] != 'Missing Serial':
        if AD_master_list.count(line['AD Serial Number']) != 1:
            AD_master_list.append(line['AD Serial Number'])
        else:
            AD_duplicate_serials.append(line['AD Serial Number'])
        if AD_names.count(line['AD Computer Name']) != 1:
            AD_names.append(line['AD Computer Name'])
    else:
        AD_missing_serials.append(line)
        if AD_names.count(line['AD Computer Name']) != 1:
            AD_names.append(line['AD Computer Name'])
"""
This code block handles all of the 1to1 to AD comparisons.
The serial search function pulls all Serial Numbers found in OneToOne_raw_data
The exceptions function compares those entries with the AD_master_list and lists all AD entries with no match in 1to1
The matches function compares the OneToOne_raw_data, with 'Serial Number' as a comparison, to the AD_master_list and lists all matches
"""
serial_search = "Serial Number"
OneToOne_serials_lists = find_serials(OneToOne_raw_data, serial_search)
AD_exceptions_list = find_exceptions(OneToOne_serials_lists, AD_clean_data)
AD_OneToOne_matches = find_matches(OneToOne_raw_data, serial_search, AD_clean_data)
"""
This code block iterates back over the AD_clean_data with the AD_duplicate_serials list to pull ALL entries
With matching serial numbers to a seperate list
"""
ad_duplicates = []
for line in AD_clean_data:
    for number in AD_duplicate_serials:
        if line['AD Serial Number'] == number:
            ad_duplicates.append(line)
ad_duplicates_sorted = sorted(
    ad_duplicates, key=lambda x: x['AD Serial Number'])
"""
This code block handles the comparison of AD_master_list to OnetoOne_raw_data to pull a list of 1to1 entries with no matches in AD
The names conditional is to handle those AD entries with empty description fields and 'Missing Serial'
Only 1to1 entries with no serial number AND no name match in AD will be added to the exceptions list
This is due to AD not updating description fields as quickly as we deploy devices
"""
OneToOne_exceptions_list = []
for line in OneToOne_raw_data:
    # Checks if Serial and Name BOTH match from 1to1 to AD
    if not AD_master_list.count(line['Serial Number']) and not AD_names.count(line['Computer Name']):
        OneToOne_exceptions_list.append(line)

#############################
# Function to optionally locate an Autopilot file
#############################
"""
This code block handles autopilot data input
To start, the autopilot flag is set to False unless changed by the user
Autopilot_popup() gives user the choice of selecting a file, or skipping
Autopilot_error_popup() gives user feedback when the file chosen does not meet requirements
"""
Autopilot = False


def Autopilot_popup():
    autopilot_choice = tk.BooleanVar(root, False)
    popup = tk.Toplevel()
    root.withdraw()
    popup.title("Autopilot import")
    popup.geometry("300x75+850+500")
    popup_label = tk.Label(
        popup, text="Do you wish to import an Autopilot file?")
    popup_label.pack(pady=10)
    yes_button = tk.Button(popup, text="Yes", command=lambda: (
        autopilot_choice.set(True), popup.destroy()))
    yes_button.place(relx=0.25, rely=0.7, anchor=tk.CENTER)
    no_button = tk.Button(popup, text="No", command=lambda: (
        autopilot_choice.set(False), popup.destroy()))
    no_button.place(relx=0.75, rely=0.7, anchor=tk.CENTER,)
    popup.wait_window(popup)
    return autopilot_choice.get()


def Autopilot_error_popup():
    popup = tk.Toplevel()
    popup.title("Error: Invalid file selected")
    popup.geometry("550x100+800+500")
    popup_label = tk.Label(popup, text="Please be sure to select the exported autopilot document!\n"
                           "File must contain 'Group tag' and 'Serial number'")
    popup_label.pack(pady=10)
    popup_button = tk.Button(popup, text="Try Again", command=popup.destroy)
    popup_button.pack()
    popup.lift()
    return popup


Autopilot_choice = Autopilot_popup()


def Autopilot_file_select():
    root.withdraw()
    file_path = filedialog.askopenfilename(
        title="Please Select Your Exported Autopilot File!")
    return file_path


"""
This code block handles the file select loop if the user chose to import an Autopilot file
Loop checks for a file_path, if user canceled it will exit the loop and continue
It then checks for the .csv file type, and then tries to extract necessary data
If the filetype is incorrect, or the necessary data is now present, it will open the Autopilot_error_popup()
If the file and data are correct, it will end the loop, set the Autopilot flag to True, and writes a list of dictionaries
"""
while Autopilot_choice:
    file_path = Autopilot_file_select()
    Autopilot_raw_data = []
    if file_path:
        if file_path.endswith(".csv"):
            try:
                with open(file_path, 'r', encoding='utf-8-sig') as file:
                    csv_reader = DictReader(file)
                    desired_headers = ['Group tag', 'Serial number']
                    if not all(header in csv_reader.fieldnames for header in desired_headers):
                        Autopilot_error = Autopilot_error_popup()
                        Autopilot_error.wait_window(Autopilot_error)
                        continue
                    Autopilot_choice = False
                    Autopilot = True
                    for row in csv_reader:
                        selected_data = {}
                        for header in desired_headers:
                            selected_data[header] = row.get(header)
                        Autopilot_raw_data.append(selected_data)
            except:
                Autopilot_error = Autopilot_error_popup()
                Autopilot_error.wait_window(Autopilot_error)
        else:
            Autopilot_error = Autopilot_error_popup()
            Autopilot_error.wait_window(Autopilot_error)
    else:
        sys.exit()


#############################
# Function to optionally locate an Intune file
#############################
"""
This entire set of code blocks is a rewrite of the above Autopilot code block
"""
Intune = False


def Intune_popup():
    intune_choice = tk.BooleanVar(root, False)
    popup = tk.Toplevel()
    root.withdraw()
    popup.title("Intune import")
    popup.geometry("300x75+850+500")
    popup_label = tk.Label(popup, text="Do you wish to import an Intune file?")
    popup_label.pack(pady=10)
    yes_button = tk.Button(popup, text="Yes", command=lambda: (
        intune_choice.set(True), popup.destroy()))
    yes_button.place(relx=0.25, rely=0.7, anchor=tk.CENTER)
    no_button = tk.Button(popup, text="No", command=lambda: (
        intune_choice.set(False), popup.destroy()))
    no_button.place(relx=0.75, rely=0.7, anchor=tk.CENTER,)
    popup.wait_window(popup)
    return intune_choice.get()


def Intune_error_popup():
    popup = tk.Toplevel()
    popup.title("Error: Invalid file selected")
    popup.geometry("550x100+800+500")
    popup_label = tk.Label(popup, text="Please be sure to select the exported Intune document!\n"
                           "File must contain 'Device name' and 'Serial number'")
    popup_label.pack(pady=10)
    popup_button = tk.Button(popup, text="Try Again", command=popup.destroy)
    popup_button.pack()
    popup.lift()
    return popup


Intune_choice = Intune_popup()


def Intune_file_select():
    root.withdraw()
    file_path = filedialog.askopenfilename(
        title="Please Select Your Exported Intune File!")
    return file_path


while Intune_choice:
    file_path = Intune_file_select()
    Intune_raw_data = []
    if file_path:
        if file_path.endswith(".csv"):
            try:
                with open(file_path, 'r', encoding='utf-8-sig') as file:
                    csv_reader = DictReader(file)
                    desired_headers = ['Device name', 'Serial number']
                    if not all(header in csv_reader.fieldnames for header in desired_headers):
                        Intune_error = Intune_error_popup()
                        Intune_error.wait_window(Intune_error)
                        continue
                    Intune_choice = False
                    Intune = True
                    for row in csv_reader:
                        selected_data = {}
                        for header in desired_headers:
                            selected_data[header] = row.get(header)
                        Intune_raw_data.append(selected_data)
            except:
                Intune_error = Intune_error_popup()
                Intune_error.wait_window(Intune_error)
        else:
            Intune_error = Intune_error_popup()
            Intune_error.wait_window(Intune_error)
    else:
        sys.exit()

#############################
# Readme file
#############################
# This code block writes a readme sheet to the end of the excel spreadsheet
readme = """---Some helpful information about the data in this file---

*AD_OneToOne_matches: Lists all entries with matching Serial Numbers between AD and 1to1

*1OneToOne_exceptions_list: Lists all 1to1 entries that do not have matching AD entries
This takes into account AD entries with missing SN: or description fields
And only shows 1to1 entries with NO matchines serial or computer names

*AD_exceptions_list: Lists all AD entries that do not have matching 1to1 entries
This does not include Missing Serials

*AD_Duplicates: Is a list of all AD entries with the same Serial Number

*AD_missing_serials: Lists all AD entries with a missing SN: field

*AD_Autopilot_matches: Lists all AD entries that have matching serial numbers in Autopilot

*AD_Autopilot_exceptions: Lists all AD entries that do not have matching serial numbers in Autopilot

*AD_Intune_matches: Lists all AD entries that have matching serial numbers in Intune

*AD_Intune_exceptions: Lists all AD entries that do not have matching serial numbers in Intune"""

lines = readme.split("\n")

#############################
# Export functions
#############################
"""
These functions handle all of the exporting processes
exporting_popup() let's users know the data analysis and exporting process is occuring
export_file_select() chooses the location and name of exporting .xlsx
export_sheet() handles the formatting and exporting of individual sheets
"""


def exporting_popup():
    global popup
    popup = tk.Toplevel()
    popup.title("Exporting... Please Wait...")
    popup.geometry("550x100+850+500")
    popup_label = tk.Label(popup, text="Data Analysis and exporting in progress...\n"
                           "This can take up to a minute, depending on data selected.")
    popup_label.pack(pady=10)
    popup.lift()


def export_file_select():
    root.withdraw()
    file_path = filedialog.asksaveasfilename(
        title="Save Your Analyzed Data As",
        filetypes=[("Excel files", "*.xlsx"),
                   ("CSV files", "*.csv"), ("All files", "*.*")],
        defaultextension=".xlsx"
    )
    return file_path


def export_sheet(data, name):
    df_sheet = DataFrame(data)
    df_sheet.to_excel(writer, sheet_name=name, index=False)
    worksheet = workbook[name]
    for col, width in column_widths.items():
        worksheet.column_dimensions[col].width = width


file_path = export_file_select()
exporting_popup()

#############################
# Data Comparisons
#############################
"""
All data comparison handles in thie block
Data sets comprised of two dictionaries are combined for output
Optional Intune and Autopilot comparisons happen when flagged
"""


def combine_dict(dict):
    data_sheet = []
    for sublist in dict:
        combined_dict = {}
        for dictionary in sublist:
            combined_dict.update(dictionary)
        data_sheet.append(combined_dict)
    return data_sheet


data_sheet1 = combine_dict(AD_OneToOne_matches)


if Autopilot:
    serial_search = "Serial number"
    Autopilot_serials_list = find_serials(Autopilot_raw_data, serial_search)
    AD_Autopilot_exceptions = find_exceptions(Autopilot_serials_list, AD_clean_data)
    AD_Autopilot_matches = find_matches(Autopilot_raw_data, serial_search, AD_clean_data)
    data_sheet2 = combine_dict(AD_Autopilot_matches)

    if Intune:
        serial_search = 'Serial number'
        Intune_serials_list = find_serials(Intune_raw_data, serial_search)
        AD_Intune_exceptions = find_exceptions(Intune_serials_list, AD_clean_data)
        AD_Intune_matches = find_matches(Intune_raw_data, serial_search, AD_clean_data)
        data_sheet3 = combine_dict(AD_Intune_matches)

elif Intune:
    serial_search = "Serial number"
    Intune_serials_list = find_serials(Intune_raw_data, serial_search)
    AD_Intune_exceptions = find_exceptions(Intune_serials_list, AD_clean_data)
    AD_Intune_matches = find_matches(Intune_raw_data, serial_search, AD_clean_data)
    data_sheet3 = combine_dict(AD_Intune_matches)

#############################
# Format and export the .xlsx
#############################
"""
This code blocks handles all of the exporting
"""

column_widths = {'A': 30, 'B': 30, 'C': 30, 'D': 30, 'E': 30, 'F': 30}

with ExcelWriter(file_path) as writer:
    workbook = writer.book
    df_sheet1 = export_sheet(data_sheet1, 'AD_OneToOne_matches')
    df_sheet2 = export_sheet(OneToOne_exceptions_list,
                             'OneToOne_exceptions_list')
    df_sheet3 = export_sheet(AD_exceptions_list, 'AD_exceptions_list')
    df_sheet4 = export_sheet(ad_duplicates_sorted, 'AD_Duplicates')
    df_sheet5 = export_sheet(AD_missing_serials, 'AD_missing_serials')

    if Autopilot:
        df_sheet6 = export_sheet(data_sheet2, 'AD_Autopilot_matches')
        df_sheet7 = export_sheet(
            AD_Autopilot_exceptions, 'AD_Autopilot_exceptions')

        if Intune:
            df_sheet8 = export_sheet(data_sheet3, 'AD_Intune_matches')
            df_sheet9 = export_sheet(
                AD_Intune_exceptions, 'AD_Intune_exceptions')
            df_sheet10 = DataFrame({"Readme": lines})
            df_sheet10.to_excel(writer, sheet_name='README', index=False)

        else:
            df_sheet8 = DataFrame({"Readme": lines})
            df_sheet8.to_excel(writer, sheet_name='README', index=False)

    elif Intune:
        df_sheet6 = export_sheet(data_sheet3, 'AD_Intune_matches')
        df_sheet7 = export_sheet(AD_Intune_exceptions, 'AD_Intune_exceptions')
        df_sheet8 = DataFrame({"Readme": lines})
        df_sheet8.to_excel(writer, sheet_name='README', index=False)

    else:
        df_sheet6 = DataFrame({"Readme": lines})
        df_sheet6.to_excel(writer, sheet_name='README', index=False)


def close_popup():
    """
    This function is used to destroy the exporting popup
    Unable to destroy it outside of using global, as it returns a boolean value
    """
    if 'popup' in globals():
        popup.destroy()


close_popup()

#############################
# Post-processing
#############################
"""
This function informs user of a successful data analysis/export
"""


def export_complete():
    popup = tk.Toplevel()
    popup.title("Export Complete!")
    popup.geometry("300x75+850+500")
    popup_label = tk.Label(
        popup, text="The data has been analyzed and exported succesfully!")
    popup_label.pack(pady=10)
    popup_button = tk.Button(popup, text="Close", command=popup.destroy)
    popup_button.pack()
    popup.lift()
    return popup


complete_popup = export_complete()
complete_popup.wait_window(complete_popup)


#############################
# Additional Comments and To-Do
#############################
