#!/usr/bin/python

from ldap3 import Server, Connection, ALL, SUBTREE
import re, sys
import tkinter as tk
from tkinter import filedialog
from csv import DictReader
#----------------------------------------------------#
#Data comparison tool by Joshua Harrison             |
#For AD, 1to1 Asset Management, and Microsoft Intune |
#----------------------------------------------------#
############################
#Globals
############################
def close_window(): #To close tkinter windows
    root.quit()

def close_popup(): #To close tkinter popups
    if 'popup' in globals():
        popup.destroy()

def find_serials(list, serial_search):
    serial_list = []
    for line in list:
        if serial_list.count(line[serial_search]) != 1:
            serial_list.append(line[serial_search])
    return serial_list

def exceptions(serials):
    exceptions = []
    for line in AD_data_clean:
        if line['AD Serial Number'] != 'Missing Serial' and serials.count(line['AD Serial Number']) != 1:
            exceptions.append(line)
    return exceptions

def matches(list, serial_search):
    matches = []
    for line in AD_data_clean:
        for line2 in list:
            if line2[serial_search] == line ['AD Serial Number']:
                matched_line = []
                matched_line.append(line2)
                matched_line.append(line)
                matches.append(matched_line)
                break
    return matches

root = tk.Tk()


#############################
#Function to establish proper location/container for AD
#############################
def school_select(): #To choose which school to pull AD data from
    my_string_variable = tk.StringVar(root, "") #This is the school identifier for AD
    grade_variable = tk.StringVar(root, "") #This is the grade level identifier for AD
    menu = tk.Menu(root)
    root.config(menu=menu)

    elementary = tk.Menu(menu)
    middle = tk.Menu(menu)
    high = tk.Menu(menu)
    other = tk.Menu(menu)

    #Elementary Schools
    elementary.add_command(label="    ####REDACTED", command=lambda: (my_string_variable.set(    ####REDACTED"), grade_variable.set("    ####REDACTED"), close_window()))
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED

    #Middle Schools
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED

    #High Schools
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED
    ####REDACTED

    #Other Schools
    ####REDACTED
    ####REDACTED

    #Drop-Down Menus
    menu.add_cascade(label="Elementary Schools", menu=elementary)
    menu.add_cascade(label="Middle Schools", menu=middle)
    menu.add_cascade(label="High Schools", menu=high)
    menu.add_cascade(label="Other Schools", menu=other)

    #Configuration of Menu Window
    root.geometry("220x40+900+400")
    #root.overrideredirect(True)
    title_bar = tk.Label(root, text="Please Choose Your School", bg="darkgreen", fg="white")
    title_bar.pack(side="top", fill="x")
    root.mainloop()
    return my_string_variable.get(), grade_variable.get() #Returns the variables for use in the search_base as index values

school = school_select() #Stores the returned index values as a variable


#############################
#AD Connector and search parameters
#############################
server = Server('    ####REDACTED', get_info=ALL) #AD/LDAP server
conn = Connection(server, user='    ####REDACTED', password='    ####REDACTED', auto_bind=True) #Credentials

search_base = 'OU=Student,OU=Workstations,OU='f"{school[0]}"',OU='f"{school[1]}"',OU=schools,DC=    ####REDACTED,DC=    ####REDACTED' #Search location/ Student
search_filter = '(objectClass=*)' #ALL objects in container
attributes=('name', 'description', 'lastLogon') #Only pull these attributes

conn.search(search_base, search_filter, search_scope=SUBTREE, attributes=attributes) #Activates the search parameters

AD_data_list = [] #Base list to store pulled AD data
for entry in conn.entries:
    AD_data_list.append((entry.entry_attributes_as_dict)) #Iterates over entries from AD search and adds them as DICTS to LIST

search_base = 'OU=Staff,OU=Workstations,OU='f"{school[0]}"',OU='f"{school[1]}"',OU=schools,DC=    ####REDACTED,DC=    ####REDACTED' #Search location /Staff
search_filter = '(objectClass=*)' #ALL objects in container
attributes=('name', 'description', 'lastLogon') #Only pull these attributes

conn.search(search_base, search_filter, search_scope=SUBTREE, attributes=attributes) #Activates the search parameters

for entry in conn.entries:
    AD_data_list.append((entry.entry_attributes_as_dict)) #Appending the staff devices to the base list

conn.unbind() #Cleanly closes the connection


#############################
#Function to open file select window for 1to1
#############################
def open_file_dialog(): #Function to open a file select window for 1to1 data
    root.withdraw() #Removes root window so only filedialog shows
    file_path = filedialog.askopenfilename(title="Please Select Your Exported 1to1 Asset File!") #Saves file path as a variable
    return file_path #Returns that variable

def to1_error(): #Function to popup an error for 1to1 file selection
    popup = tk.Toplevel() #Makes the window independant
    popup.title("Error: Invalid file selected")
    popup.geometry("550x100+800+500")
    popup_label = tk.Label(popup, text="Please be sure to select the exported 1 To 1 Asset file!\n"
                           "The exported file should contain 'Asset ID', 'Serial Number', 'Asset Type', and 'Computer Name'.")
    popup_label.pack(pady=10)
    popup_button = tk.Button(popup, text="Try Again", command=popup.destroy)
    popup_button.pack()
    popup.lift() #Ensures the popup window is placed on top of other windows
    return popup #Returns the value of it's own window


############################
#Filter 1to1 Data
############################
to1_select = True #Sets the file select while loop
while to1_select: #Loop ensures user selects correct file before moving on
    file_path = open_file_dialog() #Saves file path as a variable
    to1_data_list = [] #Base 1to1 list
    if file_path: #Checks if file_path exists, if user cancels the selection this will be FALSE and will exit program
        if file_path.endswith(".csv"): #Checks for proper file type
            try: #Use the true/try/except block to guarantee proper file selection for 1to1 data
                with open(file_path, 'r', encoding="utf-8-sig") as file: #opens the specified file_path given previously
                    csv_reader = DictReader(file)
                    desired_headers = ['Asset ID', 'Computer Name', 'Serial Number'] #The headers from the CSV we wish to pull
                    if not all(header in csv_reader.fieldnames for header in desired_headers): #Checks if the .csv contains the appropriate headers
                        popup = to1_error() #If file does not contain required data, error pops up instructing user
                        popup.wait_window(popup) #Program will not continue until user closes popup
                        continue #Forces program to the beginning of the loop
                    to1_select = False #If .csv contains headers this breaks the loop
                    for row in csv_reader:
                        if row.get('Asset Type Short Name') in ['Desktop', '2in1 Laptop', 'Loaner Device']: #Checks the Asset row for specific criteria before moving on
                            selected_data = {} #Dictionary for rows
                            for header in desired_headers: #Checks for each desired header
                                selected_data[header] = row.get(header) #Adds a key to selected_data user the current 'header' and sets the value
                            name = selected_data['Computer Name'] #Assigns the current 'Computer Name' to a variable
                            if name.startswith('D') == False: #Checks variable so it can remove District devices from 1to1 data
                                to1_data_list.append(selected_data)
            except: #If the try block fails due to incorrect file selection
                popup = to1_error()
                popup.wait_window(popup)
        else: #If file does not end in .csv
            popup = to1_error()
            popup.wait_window(popup)
    else: #If user exits/cancels the file select window
        sys.exit()


#############################
#Filter AD data to grab Serial Number and lastLogon time
#############################
AD_data_clean = [] #List for cleaned AD data
for data in AD_data_list:
    description = data['description']
    name = data['name']
    logon = data['lastLogon']
    name = name[0] #Saves the value of the name key

    if logon: #Checks if there is a previous logon
        datetime_object = logon[0] #Saves the value of the logon key
        lastlogon = datetime_object.strftime("%Y-%m-%d %H:%M:%S") #Formats the datetime
    else:
        lastlogon = "No Previous Login" #If no previous logon

    if name != 'Student': #####################Check this. It was a bug fix for Student empty entry being exported.###################
        if description: #Checks for a description field
            description_str = description[0] #Saves the value of description key
            match = re.search(r"SN:([a-zA-Z0-9]+),", description_str) #Pulls the SN: from description
            if match: #If it was able to pull the SN:
                serial = match.group(1) #Saves the regex group as a variable
                AD_data_clean.append({'AD Serial Number': serial, 'AD Computer Name': name, 'Last Login': lastlogon}) #Adds formatted row
        else: #If no description field/ SN
            AD_data_clean.append({'AD Serial Number': 'Missing Serial', 'AD Computer Name': name, 'Last Login': lastlogon}) #Adds formatted row


#############################
#Compare the two data sets (to1_data_list) and (AD_data_clean)
#############################
ad_master_list = [] #List of all Serial Numbers found in the AD data
ad_duplicate_serial = [] #List of just the duplicate Serial Numbers found in the AD data
ad_missing_serial = [] #List of all the entries with missing serial numbers#
ad_name = [] #List of all Computer Names in AD entries
for line in AD_data_clean:
    if line['AD Serial Number'] != 'Missing Serial': #Checks for Missing Serials
        if ad_master_list.count(line['AD Serial Number']) != 1: #If the AD Serial Number is not already in the ad_master_list
            ad_master_list.append(line['AD Serial Number']) #Adds the entry
        else:
            ad_duplicate_serial.append(line['AD Serial Number']) #If it is in the ad_master_list, adds to ad_duplicate_serial
        if ad_name.count(line['AD Computer Name']) != 1: #Checks for computer name is in ad_name
            ad_name.append(line['AD Computer Name']) #Adds it if not present
    else:
        ad_missing_serial.append(line) #Adds 'Missing Serial' entries to ad_missing_serial
        if ad_name.count(line['AD Computer Name']) != 1: #Checks for computer name is in ad_name
            ad_name.append(line['AD Computer Name']) #Adds it if not present

serial_search = "Serial Number"
to1_serials = find_serials(to1_data_list, serial_search) #List of all Serial Numbers found in the 1to1 data
ad_exceptions = exceptions(to1_serials) #This lists all of the AD entries that do not match 1to1. This does NOT include 'Missing Serial' entries#
ad_1to1_matches = matches(to1_data_list, serial_search) #This is the list of all matching 1to1/AD entries#

ad_duplicates = [] #List of all entries with duplicate Serial Numbers in AD#
for line in AD_data_clean: #Iterates over each line in AD_data_clean
    for number in ad_duplicate_serial: #Iterates over each Serial Number in ad_duplicate_serial
        if line['AD Serial Number'] == number: #Checks to see if they match
            ad_duplicates.append(line) #Adds EACH entry that matches to ad_duplicates
ad_duplicates_sorted = sorted(ad_duplicates, key=lambda x: x['AD Serial Number']) #Sorts the matches
#This was done so ALL entries with duplicated data were recorded, not just the one instance
#And it was sorted so the user can easily read all of the duplicates of each Serial Number

to1_exceptions = [] #This lists all 1to1 entries that do not match AD records. This does NOT include 'Missing Serial' entries#
for line in to1_data_list:
    if ad_master_list.count(line['Serial Number']) == False and ad_name.count(line['Computer Name']) == False: #Checks if Serial and Name BOTH match from 1to1 to AD
        to1_exceptions.append(line)
#The reason behind this block is; in AD newer devices do not have a populated description field with a SN: to pull
#So the program will list it under missing serials, even if the device itself is in 1to1 and AD
#The workaround was to create the name master list from AD
#So an AD entry with 'Missing Serial' and the computer name "Test" would match a 1to1 record with
#Serial number "1234567" and a computer name of "Test"


#############################
#Function to optionally locate an Autopilot file
#############################
autopilot = False #Starting variable to skip autopilot comparisons unless user chooses otherwise
def autopilot_popup(): #Popup asking user if they want to add an autopilot dataset
    autopilot_choice = tk.BooleanVar(root, False) #Starting choice is False unless user chooses otherwise
    popup = tk.Toplevel() #Sets popup as a standalone window
    root.withdraw() #Removes any root windows
    popup.title("Autopilot import")
    popup.geometry("300x75+850+500")
    popup_label = tk.Label(popup, text="Do you wish to import an Autopilot file?")
    popup_label.pack(pady=10)
    yes_button = tk.Button(popup, text="Yes", command=lambda: (autopilot_choice.set(True), popup.destroy())) #Sets choice to True and closes
    yes_button.place(relx=0.25, rely=0.7, anchor=tk.CENTER)
    no_button = tk.Button(popup, text="No", command=lambda: (autopilot_choice.set(False), popup.destroy())) #Sets choice to False and closes
    no_button.place(relx=0.75, rely=0.7, anchor=tk.CENTER,)
    popup.wait_window(popup) #Programs waits until popup is closed before continuing
    return autopilot_choice.get() #Returns the boolean value

def autopilot_error(): #Error popup when user selects incorrect file
    popup = tk.Toplevel()
    popup.title("Error: Invalid file selected")
    popup.geometry("550x100+800+500")
    popup_label = tk.Label(popup, text="Please be sure to select the exported autopilot document!\n"
                           "File must contain 'Group tag' and 'Serial number'")
    popup_label.pack(pady=10)
    popup_button = tk.Button(popup, text="Try Again", command=popup.destroy)
    popup_button.pack()
    popup.lift()
    return popup #Necessary for popup.wait_window

popup = autopilot_popup() #Saves the boolean from the function as a variable

def open_file_autopilot(): #Function to locate autopilot file
    root.withdraw() #Hides root window
    file_path = filedialog.askopenfilename(title="Please Select Your Exported Autopilot File!")
    return file_path #Returns selected file_path

while popup: #Loop for autopilot file selection to ensure correct file selected
    file_path = open_file_autopilot() #Calls filedialog function and saves path as variable
    autopilot_data_list = []
    if file_path: #Checks if file_path exists, if user exits/cancels it will skip
        if file_path.endswith(".csv"): #Checks for .csv file
            try: #Try/except block to check for proper data in file
                with open(file_path, 'r', encoding='utf-8-sig') as file: #Encoding required for autopilot export
                    csv_reader = DictReader(file)
                    desired_headers = ['Group tag', 'Serial number'] #Required headers for file
                    if not all(header in csv_reader.fieldnames for header in desired_headers): #If headers not found
                        popup = autopilot_error()
                        popup.wait_window(popup)
                        continue #Will go back to start of loop
                    popup = False #If file correct, stops the loop
                    autopilot = True #Sets autopilot to True to tell program to run comparisons later
                    for row in csv_reader:
                        selected_data = {}
                        for header in desired_headers:
                            selected_data[header] = row.get(header)
                        autopilot_data_list.append(selected_data)
            except: #If try block fails
                popup = autopilot_error()
                popup.wait_window(popup)
        else: #If file is not a .csv
            popup = autopilot_error()
            popup.wait_window(popup)
    else:
        sys.exit() #Will skip this block and continue program


#############################
#Function to optionally locate an Intune file
#############################
intune = False #intune set to False unless user selects otherwise
def intune_popup(): #Popup to ask user if they want to add an intune dataset
    intune_choice = tk.BooleanVar(root, False) #Sets choice to False, unless user chooses otherwise
    popup = tk.Toplevel() #Creates popup as an independant window
    root.withdraw() #Hides root window
    popup.title("Intune import")
    popup.geometry("300x75+850+500")
    popup_label = tk.Label(popup, text="Do you wish to import an Intune file?")
    popup_label.pack(pady=10)
    yes_button = tk.Button(popup, text="Yes", command=lambda: (intune_choice.set(True), popup.destroy())) #Sets choice to True and closes
    yes_button.place(relx=0.25, rely=0.7, anchor=tk.CENTER)
    no_button = tk.Button(popup, text="No", command=lambda: (intune_choice.set(False), popup.destroy())) #Sets choice to False and closes
    no_button.place(relx=0.75, rely=0.7, anchor=tk.CENTER,)
    popup.wait_window(popup) #Program will wait until popup is closed before continuing
    return intune_choice.get() #Returns boolean value

def intune_error(): #Popup to inform user of incorrect file selection
    popup = tk.Toplevel() #Creates popup as an independant window
    popup.title("Error: Invalid file selected")
    popup.geometry("550x100+800+500")
    popup_label = tk.Label(popup, text="Please be sure to select the exported Intune document!\n"
                           "File must contain 'Device name' and 'Serial number'")
    popup_label.pack(pady=10)
    popup_button = tk.Button(popup, text="Try Again", command=popup.destroy) #Closes popup
    popup_button.pack()
    popup.lift() #Puts popup on top of other windows
    return popup #Necessary for popup.wait_window

popup = intune_popup() #Saves boolean value from intune_popup as a variable

def open_file_intune(): #Function to find intune filepath
    root.withdraw() #Hides root window
    file_path = filedialog.askopenfilename(title="Please Select Your Exported Intune File!")
    return file_path #Returns the intune file path

while popup: #While loop to ensure user selects appropriate file
    file_path = open_file_intune() #Saves file path from function as a variable
    intune_data_list = []
    if file_path: #Checks for file_path existence, if user exits/closes it will skip
        if file_path.endswith(".csv"): #Checks for .csv
            try: #Try/except block to check for proper data in file
                with open(file_path, 'r', encoding='utf-8-sig') as file: #Encoding necessary for Intune export
                    csv_reader = DictReader(file)
                    desired_headers = ['Device name', 'Serial number'] #Required headers
                    if not all(header in csv_reader.fieldnames for header in desired_headers): #If headers not found
                        popup = intune_error()
                        popup.wait_window(popup)
                        continue #Will go back to start of loop
                    popup = False #If file correct, will set to False to stop loop
                    intune = True #Sets intune to True to tell the program to run comparisons later
                    for row in csv_reader:
                        selected_data = {}
                        for header in desired_headers:
                            selected_data[header] = row.get(header)
                        intune_data_list.append(selected_data)
            except: #If try block fails
                popup = intune_error()
                popup.wait_window(popup)
        else: #If file not a .csv
            popup = intune_error()
            popup.wait_window(popup)
    else:
        sys.exit() #Will skip this block and continue program


#############################
#Readme file
#############################
readme="""---Some helpful information about the data in this file---

*AD_1to1_Matches: Lists all entries with matching Serial Numbers between AD and 1to1

*1to1_Exceptions: Lists all 1to1 entries that do not have matching AD entries
This takes into account AD entries with missing SN: or description fields
And only shows 1to1 entries with NO matchines serial or computer names

*AD_Exceptions: Lists all AD entries that do not have matching 1to1 entries
This does not include Missing Serials

*AD_Duplicates: Is a list of all AD entries with the same Serial Number

*AD_Missing_Serial: Lists all AD entries with a missing SN: field

*AD_Autopilot_Matches: Lists all AD entries that have matching serial numbers in Autopilot

*AD_Autopilot_Exceptions: Lists all AD entries that do not have matching serial numbers in Autopilot

*AD_Intune_Matches: Lists all AD entries that have matching serial numbers in Intune

*AD_Intune_Exceptions: Lists all AD entries that do not have matching serial numbers in Intune"""

lines = readme.split("\n")


#############################
#Export functions
#############################
def exporting_popup(): #A popup to let users know the data analysis/export is occuring
    global popup #Is set to global so it can be terminated later in program
    popup = tk.Toplevel() #Makes the popup an independant window
    popup.title("Exporting... Please Wait...")
    popup.geometry("550x100+850+500")
    popup_label = tk.Label(popup, text="Data Analysis and exporting in progress...\n"
                           "This can take up to a minute, depending on data selected.")
    popup_label.pack(pady=10)
    popup.lift() #Places the popup on top of other windows

def open_file_export(): #Function to open a file save window for the export
    root.withdraw() #Hides root window
    file_path = filedialog.asksaveasfilename(
    title="Save Your Analyzed Data As",
    filetypes=[("Excel files", "*.xlsx"), ("CSV files", "*.csv"), ("All files", "*.*")], #Lists available filetypes for export
    defaultextension=".xlsx"  # Default extension for the file
    )
    return file_path #Returns the chosen filepath/filename/filetype

def export_sheet(data, name):
    df_sheet = DataFrame(data) #Accesses the appropriate variable with the pandas DataFrame module
    df_sheet.to_excel(writer, sheet_name=name, index=False) #Pandas ExcelWriter module to assigned the variable to a sheet
    worksheet = workbook[name] #Access the workbook settings
    for col, width in column_widths.items(): #Iterate over the column_width dictionary by .items
        worksheet.column_dimensions[col].width = width    

#############################
#Data Comparisons
#############################
file_path = open_file_export() #Saves the filepath/filename/filetype as a variable
exporting_popup() #Opens the popup letting user know the export is occuring 

def combine_dict(dict): #Function to combine two dictionaries in a list
    data_sheet = []
    for sublist in dict:
        combined_dict = {}
        for dictionary in sublist:
            combined_dict.update(dictionary)
        data_sheet.append(combined_dict)
    return data_sheet

#AD_1to1 data set
data_sheet1 = combine_dict(ad_1to1_matches)

if autopilot: #If user chose to import an autopilot data set
    serial_search = "Serial number"
    autopilot_serials = find_serials(autopilot_data_list, serial_search) #List of all serial numbers in autopilot data
    ad_autopilot_exceptions = exceptions(autopilot_serials) #List of all AD entries that do not have matching serial numbers with autopilot != Missing Serial
    ad_autopilot_matches = matches(autopilot_data_list, serial_search)
    #AD_autopilot data set
    data_sheet2 = combine_dict(ad_autopilot_matches)

    if intune: #If user chose to import and autopilot AND intune dataset
        serial_search = 'Serial number'
        intune_serials = find_serials(intune_data_list, serial_search) #List of all serial numbers in Intune data
        ad_intune_exceptions = exceptions(intune_serials) #List of all AD entries that do not have matching serials with Intune != Missing Serial
        ad_intune_matches = matches(intune_data_list, serial_search) #Compares Intune serials and AD
        #AD_intune data set
        data_sheet3 = combine_dict(ad_intune_matches)

elif intune: #If user chose to ONLY import intune data
    serial_search = "Serial number"
    intune_serials = find_serials(intune_data_list, serial_search) #List of all serial numbers in Intune data
    ad_intune_exceptions = exceptions(intune_serials) #List of all AD entries that do not have matching serials with Intune != Missing Serial
    ad_intune_matches = matches(intune_data_list, serial_search) #Compares Intune serials and AD
    #AD_intune data set
    data_sheet3 = combine_dict(ad_intune_matches)


#############################
#Format and export the .csv
#Due to the necessity of multiple sheets, this is now being handled by PANDAS as an .xlsx
#############################
from pandas import DataFrame, ExcelWriter

column_widths = {'A': 30, 'B': 30, 'C': 30, 'D': 30, 'E': 30, 'F': 30} #A dictionary of columns and their respective widths

with ExcelWriter(file_path) as writer:
    workbook = writer.book #Accesses workbook settings to adjust column sizes

    #The AD_1to1_Matches data sheet
    df_sheet1 = export_sheet(data_sheet1, 'AD_1to1_Matches')
    #The 1to1_Exceptions data sheet
    df_sheet2 = export_sheet(to1_exceptions, '1to1_Exceptions')
    #The AD_Exceptions data sheet
    df_sheet3 = export_sheet(ad_exceptions, 'AD_Exceptions')
    #The AD_Duplicates data sheet
    df_sheet4 = export_sheet(ad_duplicates_sorted, 'AD_Duplicates')
    #The AD_Missing_Serial data sheet
    df_sheet5 = export_sheet(ad_missing_serial, 'AD_Missing_Serial')

#This block is accessed if autopilot is true, and it will process the necessary data and export it to the spreadsheet.
    if autopilot: #If user chose to import an autopilot data set
        #The AD_Autopilot_Matches data sheet
        df_sheet6 = export_sheet(data_sheet2, 'AD_Autopilot_Matches')
        #The AD_Autopilot_Exceptions data sheet
        df_sheet7 = export_sheet(ad_autopilot_exceptions, 'AD_Autopilot_Exceptions')

        #This block is accessed if Intune AND autopilot is true, and it will process the necessary data and export it to the spreadsheet.
        if intune: #If user chose to import and autopilot AND intune dataset
            #The AD_Intune_Matches data sheet
            df_sheet8 = export_sheet(data_sheet3, 'AD_Intune_Matches')
            #The AD_Intune_Exceptions data sheet
            df_sheet9 = export_sheet(ad_intune_exceptions, 'AD_Intune_Exceptions')
            #The README sheet
            df_sheet10 = DataFrame({"Readme": lines})
            df_sheet10.to_excel(writer, sheet_name='README', index=False)

        else:
            #The README sheet
            df_sheet8 = DataFrame({"Readme": lines})
            df_sheet8.to_excel(writer, sheet_name='README', index=False)

    #This block is accessed if Intune is true, and autopilot is FALSE. It will process the necessary data and export it to the spreadsheet.
    #Exactly the same as the code block included in the if autopilot: conditional with different sheet #s
    elif intune: #If user chose to ONLY import intune data
        #The AD_Intune_Matches data sheet
        df_sheet6 = export_sheet(data_sheet3, 'AD_Intune_Matches')
        #The AD_Intune_Exceptions data sheet
        df_sheet7 = export_sheet(ad_intune_exceptions, 'AD_Intune_Exceptions')
        #The README sheet
        df_sheet8 = DataFrame({"Readme": lines})
        df_sheet8.to_excel(writer, sheet_name='README', index=False)

    else:
        #The README sheet
        df_sheet6 = DataFrame({"Readme": lines})
        df_sheet6.to_excel(writer, sheet_name='README', index=False)

close_popup() #Close the exporting_popup


#############################
#Post-processing
#############################
def export_complete(): #This is a popup letting the user know the program ran successfully
    popup = tk.Toplevel() #Makes popup an independant window
    popup.title("Export Complete!")
    popup.geometry("300x75+850+500")
    popup_label = tk.Label(popup, text="The data has been analyzed and exported succesfully!")
    popup_label.pack(pady=10)
    popup_button = tk.Button(popup, text="Close", command=popup.destroy) #Closes popup
    popup_button.pack()
    popup.lift() #Places popup on top of other windows
    return popup #Necessary for wait_window

complete_popup = export_complete()
complete_popup.wait_window(complete_popup) #Keeps program from closing until user acknowledges export completion

#Use binary searches for the comparisons? Will this speed up the export process? 
#First attempt failed: Trouble sorting through lists of dictionaries

#Process executor? 
#First attempt failed: Kept repeating the school_select function
